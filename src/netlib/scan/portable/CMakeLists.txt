cmake_minimum_required(VERSION 3.0)

project( network.scanner.portable )

if( PLATFORM_CMAKE_DEFINES )
   STRING( REPLACE "," ";" PLATFORM_CMAKE_DEFINES ${PLATFORM_CMAKE_DEFINES} )
   foreach( DEF IN LISTS PLATFORM_CMAKE_DEFINES)
       STRING( REPLACE " " ";" SETDEF ${DEF} )
       set( ${SETDEF} )
   endforeach()
endif( PLATFORM_CMAKE_DEFINES )

include( ${SACK_BASE}/share/SACK/build/DefaultInstall.cmake )
include_directories( ${SACK_BASE}/include/SACK )
STRING( REPLACE " " ";" PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} )
STRING( REPLACE " " ";" PLATFORM_DEFINES ${PLATFORM_DEFINES} )
add_definitions( ${PLATFORM_DEFINES} )


foreach(flag_var
        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO
        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
        )
   if(${flag_var} MATCHES "/MD")
      string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
   endif(${flag_var} MATCHES "/MD")
   if(${flag_var} MATCHES "-br")
      string(REGEX REPLACE "-br" "" ${flag_var} "${${flag_var}}")
   endif(${flag_var} MATCHES "-br")
endforeach(flag_var)

if( WATCOM )
string( REGEX REPLACE "library clbrdll.lib" "" CMAKE_C_STANDARD_LIBRARIES "${CMAKE_C_STANDARD_LIBRARIES}" )
string( REGEX REPLACE "library plbrdll.lib" "" CMAKE_C_STANDARD_LIBRARIES "${CMAKE_C_STANDARD_LIBRARIES}" )
endif( WATCOM )

set( SOURCES_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/../../../../ )

set( NO_SSL ON )
set( NO_SSH ON )
include( ${SOURCES_ROOT}/CMakeSources.lst )

set(BASE_SOURCES
    ${NETWORK_SOURCES}
    ${TYPE_LIBRARY_SOURCES}
    ${JSON_SOURCES}
    ${UNSORTED_SOURCES}
    ${SYSTEM_LIBRARY_SOURCES}
    ${ExtraSources}
    ${FILESYSTEM_SOURCES}
)

set( PROJECT scan_ports.portable )
add_portable_program( ${PROJECT} ${FIRST_GCC_PROGRAM_SOURCE} 
../scanner 
${BASE_SOURCES}
${LAST_GCC_PROGRAM_SOURCE}
)
SET_PROPERTY(TARGET ${PROJECT} APPEND PROPERTY COMPILE_DEFINITIONS "__STATIC__;__STATIC_GLOBALS__;SACK_BAG_EXPORTS;__NO_OPTIONS__;__NO_DEFAULT_INTERFACES__;NO_SSL;" )
SET_TARGET_PROPERTIES(${PROJECT} PROPERTIES FOLDER "Network Examples" )

if( NOT __ARM__ )

set( PROJECT scan_addresses.portable )
add_portable_program( ${PROJECT} ${FIRST_GCC_PROGRAM_SOURCE} 
../pinger 
${BASE_SOURCES}
${LAST_GCC_PROGRAM_SOURCE}
)
SET_PROPERTY(TARGET ${PROJECT} APPEND PROPERTY COMPILE_DEFINITIONS "__STATIC__;__STATIC_GLOBALS__;SACK_BAG_EXPORTS;__NO_OPTIONS__;__NO_DEFAULT_INTERFACES__;NO_SSL;" )
SET_TARGET_PROPERTIES(${PROJECT} PROPERTIES FOLDER "Network Examples" )

endif( NOT __ARM__ )

set( PROJECT nameof.portable )
add_portable_program( ${PROJECT} ${FIRST_GCC_PROGRAM_SOURCE} 
../nameof 
${BASE_SOURCES}
${LAST_GCC_PROGRAM_SOURCE}
)
SET_PROPERTY(TARGET ${PROJECT} APPEND PROPERTY COMPILE_DEFINITIONS "SACK_BAG_EXPORTS;__NO_GUI__;__NO_OPTIONS__;__NO_DEFAULT_INTERFACES__;__STATIC__;__STATIC_GLOBALS__;NO_SSL;" )
SET_TARGET_PROPERTIES(${PROJECT} PROPERTIES FOLDER "Network Examples" )


set( PROJECT ipof.portable )
add_portable_program( ${PROJECT} ${FIRST_GCC_PROGRAM_SOURCE} 
../ipof 
${BASE_SOURCES}
${LAST_GCC_PROGRAM_SOURCE}
)
SET_PROPERTY(TARGET ${PROJECT} APPEND PROPERTY COMPILE_DEFINITIONS "SACK_BAG_EXPORTS;__NO_GUI__;__NO_OPTIONS__;__NO_DEFAULT_INTERFACES__;__STATIC__;__STATIC_GLOBALS__;NO_SSL;" )
SET_TARGET_PROPERTIES(${PROJECT} PROPERTIES FOLDER "Network Examples" )

