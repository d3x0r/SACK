set( PROJECT sack_vfs_extracter )


if( MINGW OR MSVC )
    set( MORE_RESOURCES sfx.rc )
endif( MINGW OR MSVC )

if( MINGW )
	if( NOT HOST_UNIX )
		SET(CMAKE_RC_COMPILER_INIT "windres")
		SET(CMAKE_RC_COMPILER "windres")
		SET(CMAKE_RC_COMPILE_OBJECT "windres <FLAGS> <DEFINES> -O coff -o <OBJECT> <SOURCE>")
		ENABLE_LANGUAGE(RC)
	endif( NOT HOST_UNIX )
elseif( WATCOM )
    string( REPLACE ".rc" ".res" WATCOM_RESOURCES ${RESOURCES} )
    SET( CMAKE_RC_COMPILER "rc" )
    string( REPLACE "/" "\\" WATCOM_CMAKE_CURRENT_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR} )
    string( REPLACE "/" "\\" WATCOM_CMAKE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR} )
    add_custom_command( OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${WATCOM_RESOURCES}
                     DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${RESOURCES}
                     COMMAND ${CMAKE_RC_COMPILER} -i${WATCOM_CMAKE_CURRENT_SOURCE_DIR} -fo${WATCOM_CMAKE_CURRENT_BINARY_DIR}\\${WATCOM_RESOURCES} ${WATCOM_CMAKE_CURRENT_SOURCE_DIR}\\${RESOURCES}
     )
    ADD_CUSTOM_TARGET( "generate_foo${project}" DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${WATCOM_RESOURCES})

endif()

set(BASE_SOURCES
    vfs_extracter.c ${EXTRACTER_MORE_SOURCES} ${MORE_RESOURCES}
)

sack_add_executable( ${PROJECT} ${BASE_SOURCES} )

if( MSVC )
    SET( EXTRACTER_LINK_FLAGS "/level='requireAdministrator' /uiAccess='false'" )
endif( MSVC )

if( WIN32 AND CMAKE_COMPILER_IS_GNUCC AND NOT __ANDROID__ )
    SET( EXTRACTER_MORE_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/extracter.manifest )
    STRING( REPLACE "/" "\\" MT_EXTRACTER_MORE_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/extracter.manifest )
    #SET( EXTRACTER_LINK_FLAGS "/MANIFEST:NO" )
    STRING ( REPLACE "/" "\\" THISDIR ${CMAKE_CURRENT_BINARY_DIR} )
add_custom_command(TARGET
                     ${PROJECT}
                   POST_BUILD
                   COMMAND
                     ${CMAKE_COMMAND} -E echo  SOME MESSAGE HERE ${MT_EXTRACTER_MORE_SOURCES} ${THISDIR}
                   COMMAND
                     "mt.exe" -manifest \"${MT_EXTRACTER_MORE_SOURCES}\" -outputresource:\"${THISDIR}\\${PROJECT}.exe\"\;\#1
                   COMMENT
                     "Adding custom manifest containing MSVCRT80 dependency..." 
                  )
endif( WIN32 AND CMAKE_COMPILER_IS_GNUCC AND NOT __ANDROID__ )


SET_TARGET_PROPERTIES(${PROJECT} PROPERTIES
		LINK_FLAGS "${EXTRACTER_LINK_FLAGS}"
                  FOLDER utils/vfs
)


target_link_libraries( ${PROJECT} sack_vfs ${SACK_LIBRARIES} )
install_mode_dest( ${PROJECT} )


string( REPLACE ";" " " K12_SOURCES_ARG "${K12_SOURCES}" )
string( REPLACE ";" " " K12_INCLUDE_ARG "${K12_INCLUDES}" )
string( REPLACE ";" " " PLATFORM_LIBRARIES_ARG "${HOST_PLATFORM_LIBRARIES}" )
string( REPLACE ";" " " PLATFORM_DEFINES_ARG "${HOST_PLATFORM_DEFINES}" )
string( REPLACE ";" "," PLATFORM_CMAKE_DEFINES_ARG "${HOST_PLATFORM_CMAKE_DEFINES}" )
ExternalProject_Add( ${PROJECT}_portable 
	BUILD_ALWAYS ON
	SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/portable
	BINARY_DIR x
	INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
        ${EXTERNAL_BUILD_EXTRA_FLAGS}
	CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> 
		-DCMAKE_BUILD_TYPE:PATH=${CMAKE_BUILD_TYPE} 
		-DSACK_BASE=${SACK_BASE}
		-DPLATFORM_LIBRARIES=${PLATFORM_LIBRARIES_ARG}
		-DPLATFORM_DEFINES=${PLATFORM_DEFINES_ARG}
		-DPLATFORM_CMAKE_DEFINES=${PLATFORM_CMAKE_DEFINES_ARG}
		-DSHA1_SOURCES=${SHA1_SOURCES}
		-DSHA2_SOURCES=${SHA2_SOURCES}
		-DSHA3_SOURCES=${SHA3_SOURCES}
		-DK12_SOURCES=${K12_SOURCES_ARG}
		-DK12_INCLUDES=${K12_INCLUDE_ARG}
		-DMT_EXTRACTER_MORE_SOURCES=${MT_EXTRACTER_MORE_SOURCES}
)
#add_subdirectory( portable )
