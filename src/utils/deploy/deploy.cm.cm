set( BASE_PATH ${CMAKE_INSTALL_PREFIX}/${DATA_INSTALL_PREFIX}/build )
file(MAKE_DIRECTORY ${BASE_PATH})
set( FILEOUT ${BASE_PATH}/CMakePackage )
#message( "Generating package to ${BASE_PATH} ${FILEOUT} " )
FILE( WRITE ${FILEOUT} "#generated from src/deploy/deploy.cm.cm....\n" )

if( MSVC )
set( SUPPORTS_PARALLEL_BUILD_TYPE 1 )
endif( MSVC )

include( GNUInstallDirs )
if( __LINUX__ )
SET(  SHARED_LIBPATH ${CMAKE_INSTALL_LIBDIR} )
SET(  LINK_LIBPATH ${CMAKE_INSTALL_LIBDIR} )
SET(  SHARED_BINPATH ${CMAKE_INSTALL_BINDIR} )
else()
SET(  SHARED_LIBPATH ${CMAKE_INSTALL_BINDIR} )
SET(  LINK_LIBPATH ${CMAKE_INSTALL_LIBDIR} )
SET(  SHARED_BINPATH ${CMAKE_INSTALL_BINDIR} )
endif()

SET(  SHARED_PLUGINPATH ${CMAKE_INSTALL_PREFIX}/${COMPILED_INSTALL_PREFIX}/plugins )


set( __ARM__ @__ARM__@ )
if( __ARM__ )
    ADD_DEFINITIONS( -D__ARM__=1 )
endif( __ARM__ )

set( __NO_ODBC__ @__NO_ODBC__@ )
if( __NO_ODBC__ )
    ADD_DEFINITIONS( -D__NO_ODBC__=1 )
endif( __NO_ODBC__ )

		FILE( APPEND ${FILEOUT} "SET(  SHARED_PLUGINPATH $" "{CMAKE_INSTALL_PREFIX}/share/SACK/plugins )\n" )

		FILE( APPEND ${FILEOUT} "#set was_monolithic_build to build mode\n" )
		FILE( APPEND ${FILEOUT} "set( WAS_MONOLITHIC @BUILD_MONOLITHIC@ )\n" )
		FILE( APPEND ${FILEOUT} "\n" )
if( __BULLET_ENABLED__ )
		FILE( APPEND ${FILEOUT} "set( BULLET_SOURCE @BULLET_SOURCE@ )\n" )
if( BT_USE_DOUBLE_PRECISION )
		FILE( APPEND ${FILEOUT} "add_definitions( -DBT_USE_DOUBLE_PRECISION )\n" )
endif()


#       (after MiniCL) BulletWorldImporter
		FILE( APPEND ${FILEOUT} "set( BULLET_LIBRARIES Bullet3Common BulletSoftBody BulletDynamics BulletCollision LinearMath ) \n" )
endif()

foreach( DEF @PLATFORM_DEFINES@ )
	if( ${DEF} MATCHES "\"" )
		message( "bad quoting in: ${DEF}" )
		STRING( REPLACE "\"" "\\\"" DEF  ${DEF} )
		message( "bad quoting fixed? in: ${DEF}" )
	endif()
	FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} ${DEF} )\n" )
	FILE( APPEND ${FILEOUT} "add_definitions( ${DEF} )\n" )
endforeach( DEF )

FILE( APPEND ${FILEOUT} "if( NOT CMAKE_CXX_FLAGS_DEBUG MATCHES \"-D_DEBUG\" )
	set(  CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG\" )
endif( NOT CMAKE_CXX_FLAGS_DEBUG MATCHES \"-D_DEBUG\" )

if( NOT CMAKE_CXX_FLAGS_DEBUG MATCHES \"-D_DEBUG_INFO\" )
	set(  CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG_INFO\" )
endif( NOT CMAKE_CXX_FLAGS_DEBUG MATCHES \"-D_DEBUG_INFO\" )

# visual studio headers change with _DEBUG defined... so it can't be release with _DEBUG defined
if( NOT CMAKE_CXX_FLAGS_RELWITHDEBINFO MATCHES \"-D_DEBUG_INFO\" )
	set(  CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -D_DEBUG_INFO\" )
endif( NOT CMAKE_CXX_FLAGS_RELWITHDEBINFO MATCHES \"-D_DEBUG_INFO\" )

if( NOT CMAKE_C_FLAGS_DEBUG MATCHES \"-D_DEBUG\" )
	set(  CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -D_DEBUG\" )
endif( NOT CMAKE_C_FLAGS_DEBUG MATCHES \"-D_DEBUG\" )
if( NOT CMAKE_C_FLAGS_DEBUG MATCHES \"-D_DEBUG_INFO\" )
	set(  CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -D_DEBUG_INFO\" )
endif( NOT CMAKE_C_FLAGS_DEBUG MATCHES \"-D_DEBUG_INFO\" )

# visual studio headers change with _DEBUG defined... so it can't be release with _DEBUG defined
if( NOT CMAKE_C_FLAGS_RELWITHDEBINFO MATCHES \"-D_DEBUG_INFO\" )
	set(  CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO} -D_DEBUG_INFO\" )
endif( NOT CMAKE_C_FLAGS_RELWITHDEBINFO MATCHES \"-D_DEBUG_INFO\" )

#SET(CMAKE_C_FLAGS_RELWITHDEBINFO CMAKE_C_FLAGS_RELWITHDEBINFO CACHE STRING \"\" )
#SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_CXX_FLAGS_RELWITHDEBINFO CACHE STRING \"\" )
#SET(CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_DEBUG CACHE STRING \"\" )
#SET(CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_DEBUG CACHE STRING \"\" )
" )


set( PCD "@PLATFORM_CMAKE_DEFINES@" )
foreach( DEF IN LISTS PCD )
   FILE( APPEND ${FILEOUT} "SET( ${DEF} )\n" )
endforeach( DEF )

if( MAKE_RCOORD_SINGLE )
		FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} -DMAKE_RCOORD_SINGLE )\n" )
		FILE( APPEND ${FILEOUT} "add_definitions( -DMAKE_RCOORD_SINGLE )\n" )
endif()

if( CMAKE_VS_PLATFORM_TOOLSET )
		FILE( APPEND ${FILEOUT} "set( CMAKE_VS_PLATFORM_TOOLSET ${CMAKE_VS_PLATFORM_TOOLSET} )\n" )
endif( CMAKE_VS_PLATFORM_TOOLSET )

if( MSVC )
		# transmit disable of snprintf insecurity
		FILE( APPEND ${FILEOUT} "add_definitions( -wd4996 )\n" )
                FILE( APPEND ${FILEOUT} "SET(CMAKE_CXX_FLAGS \"$" "{CMAKE_CXX_FLAGS} /MP8\")\n")
		FILE( APPEND ${FILEOUT} "SET(CMAKE_C_FLAGS \"$" "{CMAKE_C_FLAGS} /MP8\")\n")
endif( MSVC )

		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "enable_language(C)\n" )
		FILE( APPEND ${FILEOUT} "enable_language(CXX)\n" )
		FILE( APPEND ${FILEOUT} "\n" )

		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "SET( __NO_ODBC__ ${__NO_ODBC__})\n" )
if( __NO_ODBC__ )
		FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} -D__NO_ODBC__ )\n" )
		FILE( APPEND ${FILEOUT} "ADD_DEFINITIONS( -D__NO_ODBC__=1 )\n" )
endif( __NO_ODBC__ )

		FILE( APPEND ${FILEOUT} "SET( __NO_NETWORK_ ${__NO_NETWORK__})\n" )
if( __NO_NETWORK__ )
		FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} -D__NO_NETWORK__ )\n" )
		FILE( APPEND ${FILEOUT} "ADD_DEFINITIONS( -D__NO_NETWORK__ )\n" )
endif( __NO_NETWORK__ )


if( FORCE_CXX )
		FILE( APPEND ${FILEOUT} "SET( FORCE_CXX ${FORCE_CXX})\n" )
endif( FORCE_CXX )

		FILE( APPEND ${FILEOUT} "SET( __ANDROID__ ${__ANDROID__})\n" )
if( __ANDROID__ )
		FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} -D__ANDROID__ )\n" )
		FILE( APPEND ${FILEOUT} "ADD_DEFINITIONS( -D__ANDROID__ )\n" )
endif( __ANDROID__ )
		FILE( APPEND ${FILEOUT} "SET( __ANDROID_OLD_PLATFORM_SUPPORT__ ${__ANDROID_OLD_PLATFORM_SUPPORT__})\n" )
if( __ANDROID_OLD_PLATFORM_SUPPORT__ )
		FILE( APPEND ${FILEOUT} "ADD_DEFINITIONS( -D__ANDROID_OLD_PLATFORM_SUPPORT__ )\n" )
endif( __ANDROID_OLD_PLATFORM_SUPPORT__ )

		FILE( APPEND ${FILEOUT} "SET( BUILD_UNICODE ${BUILD_UNICODE} )\n" )
if( BUILD_UNICODE )
		FILE( APPEND ${FILEOUT} "ADD_DEFINITIONS( -D_UNICODE -DUNICODE )\n" )
endif( BUILD_UNICODE )

if( WATCOM )
		FILE( APPEND ${FILEOUT} "ADD_DEFINITIONS( \"-D__CMAKE_VERSION__=(${CMAKE_MAJOR_VERSION}*1000000+${CMAKE_MINOR_VERSION}*10000+${CMAKE_PATCH_VERSION}*100+${CMAKE_TWEAK_VERSION})\" )\n" )
endif( WATCOM )
		FILE( APPEND ${FILEOUT} "SET( __ARM__ ${__ARM__})\n" )
		FILE( APPEND ${FILEOUT} "SET( __CLR__ ${__CLR__})\n" )
		FILE( APPEND ${FILEOUT} "\#\#\#\#\#\#\# Needed to export these for porable binaries\n" )
		FILE( APPEND ${FILEOUT} "SET( NEED_UUID @NEED_UUID@)\n" )
if( NEED_UUID )
		FILE( APPEND ${FILEOUT} "ADD_DEFINITIONS( -D__INTERNAL_UUID__)\n" )
endif( NEED_UUID )
		FILE( APPEND ${FILEOUT} "SET( NEED_PNG ${NEED_PNG})\n" )
		FILE( APPEND ${FILEOUT} "SET( NEED_ZLIB ${NEED_ZLIB})\n" )
		FILE( APPEND ${FILEOUT} "SET( NEED_JPEG ${NEED_JPEG})\n" )
		FILE( APPEND ${FILEOUT} "SET( NEED_FREETYPE ${NEED_FREETYPE})\n" )
                FILE( APPEND ${FILEOUT} "SET( BUILD_ANDROID_CONSOLE_UTILS ${BUILD_ANDROID_CONSOLE_UTILS})\n" )
if( __CLR__ )
                FILE( APPEND ${FILEOUT} "  string( REPLACE \"/EHsc\" \"\" CMAKE_CXX_FLAGS_INIT ${CMAKE_CXX_FLAGS_INIT} )\n" )
                FILE( APPEND ${FILEOUT} "  string( REPLACE \"/EHsc\" \"\" CMAKE_C_FLAGS_INIT ${CMAKE_C_FLAGS_INIT} )\n" )
                FILE( APPEND ${FILEOUT} "  string( REPLACE \"/EHs\" \"\" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_INIT} )\n" )
                FILE( APPEND ${FILEOUT} "  string( REPLACE \"/EHs\" \"\" CMAKE_C_FLAGS_INIT ${CMAKE_C_FLAGS_INIT} )\n" )
                FILE( APPEND ${FILEOUT} "  string( REPLACE \"/EHsON\" \"\" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG} )\n" )
endif( __CLR__ )

		FILE( APPEND ${FILEOUT} "SET( __LINUX__ ${__LINUX__})\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "set( SACK_BASE ${CMAKE_INSTALL_PREFIX} )\n" )
		FILE( APPEND ${FILEOUT} "set( SACK_INCLUDE_DIR $" "{SACK_BASE}/include/SACK )\n" )
		FILE( APPEND ${FILEOUT} "set( SACK_BAG_PLUSPLUS @SACK_BAG_PLUSPLUS@ )\n" )
		FILE( APPEND ${FILEOUT} "SET( SACK_PLATFORM_LIBRARIES @PLATFORM_LIBRARIES@)\n" )
		FILE( APPEND ${FILEOUT} "set( SACK_LIBRARIES_PLUSPLUS @SACK_LIBRARIES_PLUSPLUS@ )\n" )

if( BUILD_MONOLITHIC )
		FILE( APPEND ${FILEOUT} "set( SACK_LIBRARIES sack_bag $" "{SACK_BAG_PLUSPLUS} deadstart )\n" )
else( BUILD_MONOLITHIC )
	if( NOT __ANDROID__ )
		FILE( APPEND ${FILEOUT} "set( SACK_LIBRARIES @BAG_PLUSPLUS@ bag @BAG_PSI_PLUSPLUS@ bag.psi bag.externals deadstart )\n" )
	else( NOT __ANDROID__ )
		FILE( APPEND ${FILEOUT} "set( SACK_LIBRARIES bag bag.psi bag.externals deadstart )\n" )
	endif( NOT __ANDROID__ )
endif( BUILD_MONOLITHIC )

		FILE( APPEND ${FILEOUT} "set( SACK_LIBRARY_DIR $" "{SACK_BASE}/${LINK_LIBPATH} )\n" )

		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "set( USE_OPTIONS @USE_OPTIONS@ )\n" )
		FILE( APPEND ${FILEOUT} "if( NOT USE_OPTIONS )\n" )
		FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} -D__NO_OPTIONS__ )\n" )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__NO_OPTIONS__ )\n" )
		FILE( APPEND ${FILEOUT} "endif( NOT USE_OPTIONS )\n" )
if( USING_OLD_MINGW )
	message( "CMAKE_C_COMPILER_VERSION= " ${CMAKE_CXX_COMPILER_VERSION} )
	if( CMAKE_C_COMPILER_VERSION VERSION_LESS 5.0 )
		FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} -DMINGW_SUX )\n" )
		FILE( APPEND ${FILEOUT} "add_definitions( -DMINGW_SUX )\n" )
	endif( CMAKE_C_COMPILER_VERSION VERSION_LESS 5.0 )
		FILE( APPEND ${FILEOUT} "set( CMAKE_C_FLAGS \"$" "{CMAKE_C_FLAGS} -fshort-wchar\" )\n")
		FILE( APPEND ${FILEOUT} "set( CMAKE_CXX_FLAGS \"$" "{CMAKE_CXX_FLAGS} -fshort-wchar\" )\n")

endif( USING_OLD_MINGW )
		FILE( APPEND ${FILEOUT} "set( __NO_GUI__ @__NO_GUI__@ )\n" )
if( __NO_GUI__ )
		FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} -D__NO_GUI__ )\n" )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__NO_GUI__ )\n" )
endif( __NO_GUI__ )
		FILE( APPEND ${FILEOUT} "set( __LINUX__ @__LINUX__@ )\n" )
		if( __LINUX__ )
		  FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} -D__LINUX__ )\n" )
		  FILE( APPEND ${FILEOUT} "add_definitions( -D__LINUX__ )\n" )
		endif()
		if( __64__ )
		  FILE( APPEND ${FILEOUT} "SET( __64__ ON )\n" )
		  FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} -D__64__ )\n" )
		  FILE( APPEND ${FILEOUT} "add_definitions( -D__64__ )\n" )
                else( __64__ )
		  FILE( APPEND ${FILEOUT} "SET( __64__ OFF )\n" )
		endif( __64__ )
		if( __WINDOWS__ )
		FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} -D__WINDOWS__ )\n" )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__WINDOWS__ )\n" )
		endif()
		FILE( APPEND ${FILEOUT} "set( WIN_SYS_LIBS @WIN_SYS_LIBS@ )\n" )
		FILE( APPEND ${FILEOUT} "set( SOCKET_LIBRARIES @SOCKET_LIBRARIES@ )\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "set(  CMAKE_CXX_FLAGS_DEBUG \"$" "{CMAKE_CXX_FLAGS_DEBUG}\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  CMAKE_CXX_FLAGS_RELWITHDEBINFO \"$" "{CMAKE_CXX_FLAGS_RELWITHDEBINFO}\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  CMAKE_C_FLAGS_DEBUG \"$" "{CMAKE_C_FLAGS_DEBUG}\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  CMAKE_C_FLAGS_RELWITHDEBINFO \"$" "{CMAKE_C_FLAGS_RELWITHDEBINFO}\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  SACK_REPO_REVISION \"@CURRENT_REPO_REVISION@\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  SACK_BUILD_TYPE \"@CMAKE_BUILD_TYPE@\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  SACK_GENERATOR \"@CMAKE_GENERATOR@\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  SACK_PROJECT_NAME \"@CMAKE_PROJECT_NAME@\" )\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "  if( $" "{CMAKE_COMPILER_IS_GNUCC} )\n" )
		FILE( APPEND ${FILEOUT} "    if( UNIX )\n" )
		FILE( APPEND ${FILEOUT} "      SET( CMAKE_EXE_LINKER_FLAGS \"-Wl,--as-needed\" )\n" )
		FILE( APPEND ${FILEOUT} "      SET( CMAKE_SHARED_LINKER_FLAGS \"-Wl,--as-needed\" )\n" )
		FILE( APPEND ${FILEOUT} "      SET( CMAKE_MODULE_LINKER_FLAGS \"-Wl,--as-needed\" )\n" )
		FILE( APPEND ${FILEOUT} "    endif( UNIX )\n" )
		FILE( APPEND ${FILEOUT} "    SET( FIRST_GCC_LIBRARY_SOURCE $" "{SACK_BASE}/src/SACK/deadstart_list.c )\n" )
		FILE( APPEND ${FILEOUT} "    SET( FIRST_GCC_PROGRAM_SOURCE $" "{SACK_BASE}/src/SACK/deadstart_list.c )\n" )
		FILE( APPEND ${FILEOUT} "    SET( LAST_GCC_LIBRARY_SOURCE $" "{SACK_BASE}/src/SACK/deadstart_lib.c $" "{SACK_BASE}/src/SACK/deadstart_end.c )\n" )
		FILE( APPEND ${FILEOUT} "    SET( LAST_GCC_PROGRAM_SOURCE $" "{SACK_BASE}/src/SACK/deadstart_lib.c $" "{SACK_BASE}/src/SACK/deadstart_prog.c $" "{SACK_BASE}/src/SACK/deadstart_end.c )\n" )
		FILE( APPEND ${FILEOUT} "  endif()\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "if( MSVC OR WATCOM )\n" )
		FILE( APPEND ${FILEOUT} "  SET( LAST_GCC_PROGRAM_SOURCE $" "{SACK_BASE}/src/SACK/deadstart_prog.c )\n" )
		FILE( APPEND ${FILEOUT} "endif( MSVC OR WATCOM )\n" )
		FILE( APPEND ${FILEOUT} "\n" )
if( WIN32 )
		FILE( APPEND ${FILEOUT} "add_definitions( -D_WIN32_WINNT=@WIN32_VERSION@ -DWINVER=@WIN32_VERSION@ -DWIN32)\n" )
endif( WIN32 )
      FILE( APPEND ${FILEOUT} "\n" )
if( MSVC )
      #// remove snprintf deprication and posix warning
		FILE( APPEND ${FILEOUT} "SET( PLATFORM_DEFINES $" "{PLATFORM_DEFINES} -D_CRT_SECURE_NO_WARNINGS -wd4995 -wd4996)\n" )
		FILE( APPEND ${FILEOUT} "add_definitions( -D_CRT_SECURE_NO_WARNINGS -wd4995 -wd4996)\n" )
		FILE( APPEND ${FILEOUT} "    if( CMAKE_CL_64 )\n" )
		FILE( APPEND ${FILEOUT} "      add_definitions( -D_AMD64_ -D__64__ -D_WIN64 )\n" )
		FILE( APPEND ${FILEOUT} "    else( CMAKE_CL_64 )\n" )
		FILE( APPEND ${FILEOUT} "      add_definitions( -D_X86_ )\n" )
		FILE( APPEND ${FILEOUT} "    endif( CMAKE_CL_64 )\n" )
endif( MSVC )

if( EMSCRIPTEN )
		FILE( APPEND ${FILEOUT} "#  use constructor on all registrations, and then call InvokeDeadstart() in main;" )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__MANUAL_PRELOAD__ ) " )
endif( EMSCRIPTEN )

if( __UNICODE__ )
		FILE( APPEND ${FILEOUT} "add_definitions( -DUNICODE )\n" )
endif()
if( __UNICODE__ )
		FILE( APPEND ${FILEOUT} "add_definitions( -D_UNICODE )\n" )
endif()

		FILE( APPEND ${FILEOUT} "SET( DATA_INSTALL_PREFIX ${DATA_INSTALL_PREFIX} )\n" )
      FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "#### Carried Definition of how library was linked\n" )
		FILE( APPEND ${FILEOUT} "SET( FORCE_MSVCRT @FORCE_MSVCRT@)\n" )
		FILE( APPEND ${FILEOUT} "SET( sack_extra_link_flags @extra_link_flags@)\n" )
      FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "include( $" "{SACK_BASE}/share/SACK/build/DefaultInstall.cmake )\n" )

if( BUILD_MONOLITHIC )
		FILE( APPEND ${FILEOUT} "add_definitions( -DFORCE_NO_INTERFACE )\n" )
                if( ALLOW_IMAGE_INTERFACES )
			FILE( APPEND ${FILEOUT} "add_definitions( -DALLOW_IMAGE_INTERFACES )\n" )
                endif( ALLOW_IMAGE_INTERFACES )
endif( BUILD_MONOLITHIC )
	        FILE( APPEND ${FILEOUT} "\n" )


##############################################
############# BUILD INSTALL LISTS
##############################################

if( BUILD_MONOLITHIC )

                set( libfile_list ${libfile_list} sack_bag )
   if( NOT __NO_CPLUSPLUS )
                set( libfile_list ${libfile_list} @SACK_BAG_PLUSPLUS@  )
   endif( NOT __NO_CPLUSPLUS )

else( BUILD_MONOLITHIC )

# bag.image is memory only; non platform specific utility
                SET( libfile_list ${libfile_list} bag bag.externals bag.image bag.psi deadstart sack_vfs sack_vfs.pp )
   if( WIN32 )
                SET( libfile_list ${libfile_list} dl )
   endif( WIN32 )
   if( NOT __NO_CPLUSPLUS )
                set( libfile_list ${libfile_list} @BAG_PLUSPLUS@ @BAG_PSI_PLUSPLUS@ )
   endif( NOT __NO_CPLUSPLUS )

if( NOT __NO_GUI__ )
# Win32 or __UNIX support PureGL and puregl2...
if( NOT __ANDROID__ )
                SET( libfile_list ${libfile_list} bag.image.puregl )
if( WIN32 )
                SET( libfile_list ${libfile_list} bag.video.puregl )
endif( WIN32 )
endif( NOT __ANDROID__ )
                SET( libfile_list ${libfile_list} bag.image.puregl2 )
                SET( libfile_list ${libfile_list} bag.video.puregl2 )

if( INCLUDE_VULKAN )
                SET( libfile_list ${libfile_list} bag.image.vulkan )
                SET( libfile_list ${libfile_list} bag.video.vulkan )
endif( INCLUDE_VULKAN )
if( __LINUX__ )
                SET( libfile_list ${libfile_list} bag.video.wayland )
endif( __LINUX__ )

		# proxy is memory-only and platform agnostic
                SET( libfile_list ${libfile_list} bag.video.proxy.server )
                SET( libfile_list ${libfile_list} bag.video.proxy.instance.server )
endif( NOT __NO_GUI__ )

endif( BUILD_MONOLITHIC )

if( NOT __NO_OPTIONS__ )
    if( NOT __NO_GUI__ )
        if( NOT EXCLUDE_AUX_PROGRAMS )
                SET( progfile_list ${progfile_list} EditOptions )
				if( NOT __ANDROID__ )
    	    		if( NOT EXCLUDE_AUX_PROGRAMS AND BUILD_EXTRAS )
       	            	SET( progfile_list ${progfile_list} SetOption )
			      	endif( NOT EXCLUDE_AUX_PROGRAMS AND BUILD_EXTRAS )
				endif( NOT __ANDROID__ )
        endif( NOT EXCLUDE_AUX_PROGRAMS )
       		if( NOT __ANDROID__ )
    			SET( literal_libfile_list ${literal_libfile_list} ${COMPILED_INSTALL_PREFIX}/plugins/EditOptions.plugin )
	       	else( NOT __ANDROID__ )
       		   	SET( literal_libfile_list ${literal_libfile_list} ${CMAKE_SHARED_LIBRARY_PREFIX}EditOptions.plugin${CMAKE_SHARED_LIBRARY_SUFFIX} )
	       	endif( NOT __ANDROID__ )
    endif( NOT __NO_GUI__ )
endif( NOT __NO_OPTIONS__ )


if( WIN32 )
		SET( literal_libfile_list ${literal_libfile_list}
                        ${COMPILED_INSTALL_PREFIX}/plugins/application_delay.module
                        ${COMPILED_INSTALL_PREFIX}/plugins/loginfo.module
                        ${COMPILED_INSTALL_PREFIX}/plugins/seed_random.module
                    )
                    if( INSTALL_EXTRAS )
		SET( progfile_list ${progfile_list}
                        sack_vfs_command
                        )
                    if( NOT MINGW )
		SET( progfile_list ${progfile_list}
                        sack_vfs_runner
                        sack_vfs_runner_min
                        sack_vfs_runner_sfx
                        )
		       endif( NOT MINGW )
                    endif( INSTALL_EXTRAS )
		if( NOT BUILD_MONOLITHIC )
                set( libfile_list ${libfile_list}  glew )
		endif( NOT BUILD_MONOLITHIC )
if( NOT __NO_MSGSVR__ )
		SET( progfile_list ${progfile_list} service_list sack.msgsvr.service msgsvr )
		SET( literal_libfile_list ${literal_libfile_list} ${COMPILED_INSTALL_PREFIX}/plugins/sack.msgsvr.service.plugin  )
endif( NOT __NO_MSGSVR__ )
endif( WIN32 )


if( __QNX__ )
                SET( libfile_list ${libfile_list} freeglut-gles2 )
endif( __QNX__ )

if( __ANDROID__ )
                SET( libfile_list ${libfile_list} bag.video.frame.lock )
else( __ANDROID__ )
  if( INSTALL_EXTRAS )
    if( NOT __NO_OPTIONS__ )
                SET( progfile_list ${progfile_list} importini exportini )
    endif( NOT __NO_OPTIONS__ )
    if( NOT __NO_GUI__ )
                SET( progfile_list ${progfile_list} DumpFontCache )
    endif( NOT __NO_GUI__ )
  endif( INSTALL_EXTRAS )
	if( NOT BUILD_MONOLITHIC AND NOT __NO_GUI__ )
if( WIN32 )
                SET( libfile_list ${libfile_list} bag.video )
endif( WIN32 )

	endif( NOT BUILD_MONOLITHIC AND NOT __NO_GUI__ )
endif( __ANDROID__ )


if( DIRECTX_SDK AND NOT WATCOM AND NOT CMAKE_C_COMPILER_ID STREQUAL "GNU" )
	if( NOT BUILD_MONOLITHIC AND NOT __NO_GUI__ )
		SET( libfile_list ${libfile_list} bag.video.pured3d )
		SET( libfile_list ${libfile_list} bag.video.pured3d2 )
		SET( libfile_list ${libfile_list} bag.video.pured3d10 )
		if( WIN8_SDK )
			SET( libfile_list ${libfile_list} bag.image.pured3d11 )
			SET( libfile_list ${libfile_list} bag.video.pured3d11 )
		endif( WIN8_SDK )
		SET( libfile_list ${libfile_list} bag.image.pured3d )
		SET( libfile_list ${libfile_list} bag.image.pured3d2 )
		SET( libfile_list ${libfile_list} bag.image.pured3d10 )
	endif( NOT BUILD_MONOLITHIC AND NOT __NO_GUI__ )
endif( DIRECTX_SDK AND NOT WATCOM AND NOT CMAKE_C_COMPILER_ID STREQUAL "GNU" )
##############################################
############# END BUILD INSTALL LISTS
############# BUILD INSTALL SOURCE LISTS
##############################################

		foreach( lib ${ffmpeg_libraries} ${openal_libraries} )
			FILE( APPEND ${FILEOUT} "SET( sack_ffmpeg_libraries $" "{sack_ffmpeg_libraries} $" "{SACK_BASE}/${SHARED_LIBPATH}/${lib} )\n" )
		endforeach()

		foreach( lib ${libfile_list}  )
			FILE( APPEND ${FILEOUT} "SET( sack_libfile_list $" "{sack_libfile_list} $" "{SACK_BASE}/${SHARED_LIBPATH}/@CMAKE_SHARED_LIBRARY_PREFIX@${lib}@CMAKE_SHARED_LIBRARY_SUFFIX@ )\n" )
		endforeach()
		foreach( lib ${literal_libfile_list} )
			FILE( APPEND ${FILEOUT} "SET( sack_literal_libfile_list $" "{sack_literal_libfile_list} $" "{SACK_BASE}/${lib} )\n" )
		endforeach()
		foreach( lib ${progfile_list} )
			FILE( APPEND ${FILEOUT} "SET( sack_progfile_list $" "{sack_progfile_list} $" "{SACK_BASE}/${SHARED_BINPATH}/${lib}@CMAKE_EXECUTABLE_SUFFIX@ )\n" )
		endforeach()

		FILE( APPEND ${FILEOUT} "SET( sack_binary_list $" "{sack_ffmpeg_libraries}\n"
                	       " $" "{sack_libfile_list}\n"
                	       " $" "{sack_literal_libfile_list}\n"
                	       " $" "{sack_progfile_list}\n"
                	       " $" "{sack_binary_list}\n"
                	       " )\n" )

##############################################
############# END BUILD INSTALL SOURCE LISTS
############# BUILD INSTALL MACRO
##############################################


# begin Install_Sack macro; this handles optional second arg extension...
		FILE( APPEND ${FILEOUT} "macro( INSTALL_SACK dest )\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "IF( SACK_INSTALL_INVOKED )\n" )
		FILE( APPEND ${FILEOUT} "  MESSAGE( \"Sack Install already triggered: $" "{LISTFILE_STACK}\" )\n" )
		FILE( APPEND ${FILEOUT} "ELSE( SACK_INSTALL_INVOKED )\n" )
		FILE( APPEND ${FILEOUT} "  SET( SACK_INSTALL_INVOKED ON)\n" )
		FILE( APPEND ${FILEOUT} "  set( BINARY_OUTPUT_DIR $" "{dest}/bin )\n" )
		FILE( APPEND ${FILEOUT} "  if(  \"$" "{ARGV1}\" STREQUAL \"\"  )\n" )
		FILE( APPEND ${FILEOUT} "    set( LIBRARY_OUTPUT_DIR $" "{dest}/${SHARED_LIBPATH} )\n" )
		FILE( APPEND ${FILEOUT} "  else( \"$" "{ARGV1}\" STREQUAL \"\" )\n" )
		FILE( APPEND ${FILEOUT} "    set( LIBRARY_OUTPUT_DIR $" "{ARGV1} )\n" )
		FILE( APPEND ${FILEOUT} "  endif( \"$" "{ARGV1}\" STREQUAL \"\" )\n" )


		FILE( APPEND ${FILEOUT} "install( DIRECTORY ${CMAKE_INSTALL_PREFIX}/include/SACK DESTINATION include )\n" )
		FILE( APPEND ${FILEOUT} "install( PROGRAMS $" "{ffmpeg_libraries} $" "{openal_libraries} DESTINATION $" "{LIBRARY_OUTPUT_DIR} )\n" )

#      foreach( lib ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS} )
#			FILE( APPEND ${FILEOUT} "install( PROGRAMS \"${lib}\" DESTINATION $" "{LIBRARY_OUTPUT_DIR} )\n" )
#      endforeach( lib  )

		FILE( APPEND ${FILEOUT} "install( PROGRAMS $" "{sack_libfile_list} DESTINATION $" "{LIBRARY_OUTPUT_DIR} )\n" )
if( NOT __ANDROID__ )
		FILE( APPEND ${FILEOUT} "install( PROGRAMS $" "{sack_literal_libfile_list} DESTINATION $" "{SHARED_PLUGINPATH} )\n" )
		FILE( APPEND ${FILEOUT} "install( PROGRAMS $" "{sack_progfile_list} DESTINATION $" "{BINARY_OUTPUT_DIR} )\n" )
else( NOT __ANDROID__ )
                foreach( lib ${literal_libfile_list} )
			FILE( APPEND ${FILEOUT} "install( PROGRAMS $" "{SACK_BASE}/${SHARED_LIBPATH}/${lib} DESTINATION $" "{LIBRARY_OUTPUT_DIR} )\n" )
                endforeach( lib  )
                foreach( lib ${progfile_list}  )
			FILE( APPEND ${FILEOUT} "install( PROGRAMS $" "{SACK_BASE}/${SHARED_LIBPATH}/@CMAKE_SHARED_LIBRARY_PREFIX@${lib}@CMAKE_SHARED_LIBRARY_SUFFIX@ DESTINATION $" "{LIBRARY_OUTPUT_DIR} )\n" )
			FILE( APPEND ${FILEOUT} "install( PROGRAMS $" "{SACK_BASE}/${SHARED_LIBPATH}/@CMAKE_SHARED_LIBRARY_PREFIX@${lib}.code@CMAKE_SHARED_LIBRARY_SUFFIX@ DESTINATION $" "{LIBRARY_OUTPUT_DIR} )\n" )
                endforeach( lib  )
endif( NOT __ANDROID__ )

		FILE( APPEND ${FILEOUT} "install( DIRECTORY $" "{SACK_BASE}/share/ DESTINATION $" "{dest}/share )\n" )

	if( NOT BUILD_MONOLITHIC )
#		FILE( APPEND ${FILEOUT} "install( DIRECTORY $" "{SACK_BASE}/${BINARY_OUTPUT_DIR}/webclient  DESTINATION $" "{dest}  )\n" )
	endif( NOT BUILD_MONOLITHIC )


		FILE( APPEND ${FILEOUT} "ENDIF( SACK_INSTALL_INVOKED )\n" )
		FILE( APPEND ${FILEOUT} "ENDMACRO( INSTALL_SACK )\n" )

		FILE( APPEND ${FILEOUT} "\n" )

		#//FILE( APPEND ${FILEOUT} "IF(CMAKE_BUILD_TPYE_INITIALIZED_TO_DEFAULT)\n" )

		FILE( APPEND ${FILEOUT} "set(CMAKE_BUILD_TYPE \"@CMAKE_BUILD_TYPE@\" CACHE STRING \"Set build type\")\n" )
		FILE( APPEND ${FILEOUT} "set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS $" "{CMAKE_CONFIGURATION_TYPES} Debug Release RelWithDebInfo MinSizeRel )\n" )

		#//FILE( APPEND ${FILEOUT} "ENDIF(CMAKE_BUILD_TPYE_INITIALIZED_TO_DEFAULT)\n" )

		FILE( APPEND ${FILEOUT} "\n" )

		FILE( APPEND ${FILEOUT} "if( UNIX )\n" )
		FILE( APPEND ${FILEOUT} "link_directories( $" "{SACK_LIBRARY_DIR} )\n" )
		FILE( APPEND ${FILEOUT} "endif( UNIX )\n" )
		FILE( APPEND ${FILEOUT} "\n" )


