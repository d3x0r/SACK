
  if( CMAKE_COMPILER_IS_GNUCC )
    SET( FIRST_GCC_LIBRARY_SOURCE ${SOURCES_ROOT}src/deadstart/deadstart_list.c )
    SET( FIRST_GCC_PROGRAM_SOURCE ${SOURCES_ROOT}src/deadstart/deadstart_list.c )
    SET( LAST_GCC_LIBRARY_SOURCE ${SOURCES_ROOT}src/deadstart/deadstart_lib.c ${SOURCES_ROOT}src/deadstart/deadstart_end.c )
    SET( LAST_GCC_PROGRAM_SOURCE ${SOURCES_ROOT}src/deadstart/deadstart_lib.c ${SOURCES_ROOT}src/deadstart/deadstart_prog.c ${SOURCES_ROOT}src/deadstart/deadstart_end.c )
  endif()

  if( MSVC OR WATCOM )
    SET( LAST_GCC_PROGRAM_SOURCE ${SOURCES_ROOT}src/deadstart/deadstart_prog.c )
  endif()

set( SHA1_SOURCES
  ${SOURCES_ROOT}src/contrib/sha1lib/sha1.c
  )
SET_SOURCE_FILES_PROPERTIES( ${SHA1_SOURCES} PROPERTIES
				FOLDER "Source Files\\hash\\sha1" )
set( SHA2_SOURCES
  ${SOURCES_ROOT}src/contrib/sha2lib/sha2.c
  )
SET_SOURCE_FILES_PROPERTIES( ${SHA2_SOURCES} PROPERTIES
				FOLDER "Source Files\\hash\\sha2" )
set( SHA3_SOURCES
  ${SOURCES_ROOT}src/contrib/sha3lib/sha3.c
  )
SET_SOURCE_FILES_PROPERTIES( ${SHA3_SOURCES} PROPERTIES
				FOLDER "Source Files\\hash\\sha3" )

set( K12_SOURCES
  ${SOURCES_ROOT}src/contrib/K12/lib/KangarooTwelve.c 
  ${SOURCES_ROOT}src/contrib/K12/lib/KangarooTwelve.h
  ${SOURCES_ROOT}src/contrib/K12/lib/brg_endian.h 
)
set( K12_INCLUDES "-I${SOURCES_ROOT}/src/contrib/K12/lib" )
if( 0 )
if( __64__ ) 
    set( K12_SOURCES ${K12_SOURCES}
      ${SOURCES_ROOT}src/contrib/K12/lib/Optimized64/KeccakP-1600-opt64.c
      )
    set( K12_INCLUDES "-I${SOURCES_ROOT}/src/contrib/K12/lib -I${SOURCES_ROOT}/src/contrib/K12/lib/Optimized64" )
else()
    set( K12_SOURCES ${K12_SOURCES}
        ${SOURCES_ROOT}src/contrib/K12/lib/Inplace32BI/KeccakP-1600-inplace32BI.c
    )
    set( K12_INCLUDES "-I${SOURCES_ROOT}/src/contrib/K12/lib -I${SOURCES_ROOT}/src/contrib/K12/lib/Inplace32BI" )
endif()

endif(0)
SET_SOURCE_FILES_PROPERTIES( ${RANDOM_SOURCES} PROPERTIES COMPILE_FLAGS ${K12_INCLUDES} )
SET_SOURCE_FILES_PROPERTIES( ${K12_SOURCES} PROPERTIES FOLDER "Source Files\\hash\\K12" )


set( RANDOM_SOURCES
  ${SOURCES_ROOT}src/salty_random_generator/salty_generator.c
  ${SOURCES_ROOT}src/salty_random_generator/srg_internal.h
  ${SOURCES_ROOT}src/salty_random_generator/crypt_util.c
  ${SOURCES_ROOT}src/salty_random_generator/block_shuffle.c
  ${SOURCES_ROOT}src/salty_random_generator/mersenne/mt19937ar.c
  ${SHA1_SOURCES}
  ${SHA2_SOURCES}
  ${SHA3_SOURCES}
  ${K12_SOURCES}
  )
SET_SOURCE_FILES_PROPERTIES( ${RANDOM_SOURCES} PROPERTIES
		COMPILE_FLAGS ${K12_INCLUDES} )
SET_SOURCE_FILES_PROPERTIES( ${RANDOM_SOURCES} PROPERTIES
		FOLDER "Source Files\\RNG Library" )
set( RANDOM_SOURCES_FLAGS SALTY_RANDOM_GENERATOR_SOURCE )
   set( ExtraDefinitions ${ExtraDefinitions};${RANDOM_SOURCES_FLAGS} )


set(UNSORTED_SOURCES
  ${SOURCES_ROOT}src/sysloglib/syslog.c
  ${SOURCES_ROOT}src/memlib/sharemem.c
  ${SOURCES_ROOT}src/memlib/memory_operations.c
  ${SOURCES_ROOT}src/timerlib/timers.c
  ${SOURCES_ROOT}src/idlelib/idle.c
  ${SOURCES_ROOT}src/fractionlib/fractions.c
  ${SOURCES_ROOT}src/configlib/configscript.c
  ${SOURCES_ROOT}src/procreglib/names.c
  ${SOURCES_ROOT}src/translationlib/translate.c
  ${SOURCES_ROOT}src/deadstart/deadstart_core.c
)

if( WIN32 )
 set( UNSORTED_SOURCES ${UNSORTED_SOURCES}
	  ${SOURCES_ROOT}src/printer_lib/printer.c )
endif( WIN32 )

if( NOT __ANDROID__ AND NOT EMSCRIPTEN )
  set( COMM_SOURCES ${SOURCES_ROOT}src/commlib/sackcomm.c )
  if( USE_HARDWARE_INFO AND NOT __LINUX__ )
    set( COMM_SOURCES ${COMM_SOURCES} ${SOURCES_ROOT}src/windows_hardware_library/listports.c )
  endif( USE_HARDWARE_INFO AND NOT __LINUX__ )
endif( NOT __ANDROID__ AND NOT EMSCRIPTEN )
if( USE_HARDWARE_INFO AND NOT __LINUX__ )
  set( BASE_SOURCES  ${BASE_SOURCES} ${SOURCES_ROOT}src/windows_hardware_library/listhids.c )
endif( USE_HARDWARE_INFO AND NOT __LINUX__ )


if( WIN32 )
if( NOT __NO_NETWORK__ )
set(MORE_NETWORK_SOURCES
  ${SOURCES_ROOT}src/netlib/net_winsock2.c
)
endif( NOT __NO_NETWORK__ )

set( SERVICE_STUB_SOURCES ${SOURCES_ROOT}src/utils/service/service_stub.c )
endif( WIN32 )

if( NOT __NO_NETWORK__ )
if( NOT __ARM__ )
set(MORE_NETWORK_SOURCES ${MORE_NETWORK_SOURCES}
  ${SOURCES_ROOT}src/netlib/ping.c
  ${SOURCES_ROOT}src/netlib/whois.c
)
endif( NOT __ARM__ )
endif( NOT __NO_NETWORK__ )

if( NOT __NO_NETWORK__ )
if( NEED_NETWORK )
ADD_DEFINITIONS( -DNETWORK_SOURCE )
endif( NEED_NETWORK )

if( WIN32 )
  # WSAWaitMultipleObject network handling
  SET( NETWORK_OS _win32 )
elseif( UNIX )
  if( MAC )
    #kevent event handling (BSD)
	SET( NETWORK_OS _mac )
  else( MAC )
	# epoll event handling
	SET( NETWORK_OS _linux )
   endif( MAC )
endif( WIN32 )

set( NETWORK_SOURCES
  ${SOURCES_ROOT}src/netlib/network.c
  ${SOURCES_ROOT}src/netlib/network${NETWORK_OS}.c
  ${SOURCES_ROOT}src/netlib/network_addresses.c
  ${SOURCES_ROOT}src/netlib/tcpnetwork.c
  ${SOURCES_ROOT}src/netlib/udpnetwork.c
  ${MORE_NETWORK_SOURCES}
)

if( __ANDROID__ )
   set( NETWORK_SOURCES ${NETWORK_SOURCES} ${SOURCES_ROOT}src/netlib/android_ifaddrs.c ${SOURCES_ROOT}src/netlib/android_ifaddrs.h )
endif( __ANDROID__ )


if( NOT NO_SSL )
set( NETWORK_SOURCES ${NETWORK_SOURCES}
  ${SOURCES_ROOT}src/netlib/ssl_layer.c
)
endif( NOT NO_SSL )

SET_SOURCE_FILES_PROPERTIES( ${NETWORK_SOURCES} PROPERTIES
		FOLDER "Source Files\\Network Library" )
endif( NOT __NO_NETWORK__ )


set( SYSTEM_LIBRARY_SOURCES
  ${SOURCES_ROOT}src/systemlib/args.c
  ${SOURCES_ROOT}src/systemlib/system.c
  ${SOURCES_ROOT}src/systemlib/spawntask.c
)
if( WIN32 )
set( SYSTEM_LIBRARY_SOURCES ${SYSTEM_LIBRARY_SOURCES}
  ${SOURCES_ROOT}src/systemlib/oswin.c
)
endif( WIN32 )
SET_SOURCE_FILES_PROPERTIES( ${SYSTEM_LIBRARY_SOURCES} PROPERTIES
		FOLDER "Source Files\\System Interface" )

set ( EXPAT_SOURCES
  ${SOURCES_ROOT}src/contrib/sexpat/xmlparse.c
  ${SOURCES_ROOT}src/contrib/sexpat/xmlrole.c
  ${SOURCES_ROOT}src/contrib/sexpat/xmltok.c
)
set( EXPAT_SOURCES_FLAGS XML_MIN_SIZE;SEXPAT_SOURCE )

SOURCE_GROUP( "Source Files\\XML\\expat" FILES ${EXPAT_SOURCES} )

set( GENX_SOURCES
  ${SOURCES_ROOT}src/contrib/genx/charProps.c
  ${SOURCES_ROOT}src/contrib/genx/genx.c
)
SET_SOURCE_FILES_PROPERTIES( ${GENX_SOURCES} PROPERTIES
		FOLDER "Source Files\\XML\\Genx Library" )
set( GENX_SOURCES_FLAGS GENX_SOURCE )

if( ALLOW_IMAGE_INTERFACES )
	set( VIDLIB_HEADLESS_SOURCES
			${SOURCES_ROOT}src/vidlib/proxy/server.c
			# image compress to png is available in imglib/pngimage.c
			#${SOURCES_ROOT}src/vidlib/proxy/imagepng.c
		)
	if( UNIX )
		set( VIDLIB_HEADLESS_SOURCES ${VIDLIB_HEADLESS_SOURCES}
			${SOURCES_ROOT}src/vidlib/proxy/server.c
		)
	endif( UNIX )
endif( ALLOW_IMAGE_INTERFACES )


if( WIN32 )
	#vidlib is a windows-specific driver
        # vidlib.puregl and puregl2 are non windows specific; but are not
        # included in monolithic build.
	set( VIDLIB_SOURCES
	  ${SOURCES_ROOT}src/vidlib/key.c
	  ${SOURCES_ROOT}src/vidlib/keydefs.c
	  ${SOURCES_ROOT}src/vidlib/vidlib.c
	)
	set( ExtraRenderFlags "RENDER_LIBRARY_SOURCE;_OPENGL_ENABLED" )

	if( NOT __ARM__ )
		set( VIDLIB_SOURCES ${VIDLIB_SOURCES} ${SOURCES_ROOT}src/vidlib/opengl.c )
	endif( NOT __ARM__ )

endif( WIN32 )

if( UNIX )
	#vidlib is a windows-specific driver
        # vidlib.puregl and puregl2 are non windows specific; but are not
        # included in monolithic build.
	set( VIDLIB_SOURCES
	  ${SOURCES_ROOT}src/vidlib/key.c
	  ${SOURCES_ROOT}src/vidlib/keydefs.c
	  ${SOURCES_ROOT}src/vidlib/vidlib.c
	  ${SOURCES_ROOT}src/vidlib/xvidlib.c
	)
	set( ExtraRenderFlags "RENDER_LIBRARY_SOURCE;_OPENGL_ENABLED" )

	if( NOT __ARM__ )
#		set( VIDLIB_SOURCES ${VIDLIB_SOURCES} ${SOURCES_ROOT}src/vidlib/opengl.c )
	endif( NOT __ARM__ )

endif( UNIX )

	SET_SOURCE_FILES_PROPERTIES( ${VIDLIB_SOURCES} PROPERTIES
					FOLDER "Source Files\\Image Output Library" )

if( NOT __NO_ODBC__ OR USE_SQLITE )

  set( ODBC_SOURCES
    ${SOURCES_ROOT}src/SQLlib/sqlparse3.c
    ${SOURCES_ROOT}src/SQLlib/sqlstub.c
    ${SOURCES_ROOT}src/SQLlib/guid.c
    ${SOURCES_ROOT}src/SQLlib/sqlutil.c
    ${SOURCES_ROOT}src/SQLlib/sqlwrap.c
  )

  if( __CLR__ )
    set( ODBC_SOURCES ${ODBC_SOURCES} ${SOURCES_ROOT}src/SQLlib/sql_ref_class.cpp )
  endif( __CLR__ )

  SET_SOURCE_FILES_PROPERTIES( ${ODBC_SOURCES} PROPERTIES
		FOLDER "Source Files\\ODBC" )

  set( ODBC_SOURCES ${ODBC_SOURCES} ${RANDOM_SOURCES} )

endif( NOT __NO_ODBC__ OR USE_SQLITE )

if( NOT __NO_ODBC__ OR USE_SQLITE )

if( USE_SQLITE )
  SET( BAG_SQLITE_INTERFACE  ${SOURCES_ROOT}src/contrib/sqlite/sqlite_interface.c )

if( NOT SQLITE3_FOUND )
  SET( SQLITE_VERSION 3.33.0-TableAlias  )
  SET( SQLITE_SOURCES ${SOURCES_ROOT}src/contrib/sqlite/${SQLITE_VERSION}/sqlite3.c )
  include_directories( ${SOURCES_ROOT}src/contrib/sqlite/${SQLITE_VERSION} )
  set_source_files_properties( ${SQLITE_SOURCES} PROPERTIES COMPILE_DEFINITIONS "SQLITE_OMIT_UTF16;SQLITE_ENABLE_COLUMN_METADATA" )

  if( NOT USE_SQLITE_EXTERNAL AND BUILD_MONOLITHIC )
   # setup to include sqlite in the core libraries...
   if( __CLR__ )
     messge( FATAL_ERROR "Monolithic build with sqlite and /CLR will fail." )
   else( __CLR__ )
     set( BAG_SQLITE_SOURCES ${SQLITE_SOURCES} )
   endif( __CLR__ )
   set( ExtraDefinitions "${ExtraDefinitions};USE_SQLITE;SQLITE_SOURCE;USE_SQLITE_INTERFACE" )
  else()
   if( __CLR__ )
   message( "SOURCES SET TO EXTERNAL" )
     set( BAG_EXTERNAL_SQLITE_SOURCES ${SQLITE_SOURCES} )
   else( __CLR__ )
     set( BAG_SQLITE_SOURCES ${SQLITE_SOURCES} )
   endif( __CLR__ )
   set( ExtraDefinitions "${ExtraDefinitions};USE_SQLITE;USE_SQLITE_INTERFACE" )
  endif()
else( NOT SQLITE3_FOUND )
  include_directories( ${SQLITE3_INCLUDE_DIR} )

  set( ExtraDefinitions "${ExtraDefinitions};USE_SQLITE;SYSTEM_SQLITE" )

endif( NOT SQLITE3_FOUND )


endif( USE_SQLITE )

SET( OPTION_SOURCE
   ${SOURCES_ROOT}src/SQLlib/optlib/getoption.c
   ${SOURCES_ROOT}src/SQLlib/optlib/getoption_v4.c
   ${SOURCES_ROOT}src/SQLlib/optlib/optionutil.c
   ${SOURCES_ROOT}src/SQLlib/optlib/optionutil_v4.c
   )
SET_SOURCE_FILES_PROPERTIES( ${OPTION_SOURCE} PROPERTIES
		FOLDER "Source Files\\Option Library" )


endif( NOT __NO_ODBC__ OR USE_SQLITE )

set( IMAGE_SOURCES
  ${SOURCES_ROOT}src/imglib/alphastab.c
  ${SOURCES_ROOT}src/imglib/alphatab.c
  ${SOURCES_ROOT}src/imglib/blotdirect.c
  ${SOURCES_ROOT}src/imglib/blotscaled.c
  ${SOURCES_ROOT}src/imglib/bmpimage.c
  ${SOURCES_ROOT}src/imglib/fntcache.c
  ${SOURCES_ROOT}src/imglib/fntrender.c
  ${SOURCES_ROOT}src/imglib/font.c
  ${SOURCES_ROOT}src/imglib/gifimage.c
  ${SOURCES_ROOT}src/imglib/image_common.c
  ${SOURCES_ROOT}src/imglib/image.c
  ${SOURCES_ROOT}src/imglib/interface.c
  ${SOURCES_ROOT}src/imglib/jpgimage.c
  ${SOURCES_ROOT}src/imglib/line.c
  ${SOURCES_ROOT}src/imglib/lucidaconsole2.c
  ${SOURCES_ROOT}src/imglib/pngimage.c
  ${SOURCES_ROOT}src/imglib/sprite_common.c
  ${SOURCES_ROOT}src/imglib/sprite.c
)

SET_SOURCE_FILES_PROPERTIES( ${IMAGE_SOURCES} PROPERTIES
		FOLDER "Source Files\\Image Library" )

set( PSI_MORE_CONTROLS
  ${SOURCES_ROOT}src/psilib/console/history_block.c
  ${SOURCES_ROOT}src/psilib/console/history_browser.c
  ${SOURCES_ROOT}src/psilib/console/history_cursor.c
  ${SOURCES_ROOT}src/psilib/console/console_keydefs.c
  ${SOURCES_ROOT}src/psilib/console/paste.c
  ${SOURCES_ROOT}src/psilib/console/psicon.c
  ${SOURCES_ROOT}src/psilib/console/psicon_interface.c
  ${SOURCES_ROOT}src/psilib/console/regaccess.c
  ${SOURCES_ROOT}src/psilib/console/WinLogic.c
  ${SOURCES_ROOT}src/psilib/console/console_block_writer.c
#  ${SOURCES_ROOT}src/psilib/console/history.h
#  ${SOURCES_ROOT}src/psilib/console/histstruct.h
#  ${SOURCES_ROOT}src/psilib/console/consolestruc.h
)


set( PSI_SOURCES
  ${SOURCES_ROOT}src/psilib/borders.c
  ${SOURCES_ROOT}src/psilib/calctl/calender.c
  ${SOURCES_ROOT}src/psilib/calctl/clock.c
  ${SOURCES_ROOT}src/psilib/calctl/analog.c
  ${SOURCES_ROOT}src/psilib/controls.c
  ${SOURCES_ROOT}src/psilib/progress_bar.c
  ${SOURCES_ROOT}src/psilib/caption_buttons.c
  ${SOURCES_ROOT}src/psilib/control_physical.c
  ${SOURCES_ROOT}src/psilib/ctlbutton.c

  ${SOURCES_ROOT}src/psilib/ctlcombo.c
  ${SOURCES_ROOT}src/psilib/ctledit.c
  ${SOURCES_ROOT}src/psilib/ctlimage.c
  ${SOURCES_ROOT}src/psilib/ctllistbox.c
  ${SOURCES_ROOT}src/psilib/ctlmisc.c
  ${SOURCES_ROOT}src/psilib/ctlprop.c
  ${SOURCES_ROOT}src/psilib/ctlscroll.c
  ${SOURCES_ROOT}src/psilib/ctlsheet.c
  ${SOURCES_ROOT}src/psilib/ctlslider.c
  ${SOURCES_ROOT}src/psilib/ctltext.c
  ${SOURCES_ROOT}src/psilib/ctltooltip.c
  ${SOURCES_ROOT}src/psilib/fileopen.c
  ${SOURCES_ROOT}src/psilib/fntdlg.c
#  ${SOURCES_ROOT}src/psilib/loadsave.c
  ${SOURCES_ROOT}src/psilib/mouse.c
  ${SOURCES_ROOT}src/psilib/palette.c
  ${SOURCES_ROOT}src/psilib/popups.c
  ${SOURCES_ROOT}src/psilib/xml_load.c
  ${SOURCES_ROOT}src/psilib/xml_save.c
  ${SOURCES_ROOT}src/psilib/option_frame.c
  ${SOURCES_ROOT}src/psilib/scrollknob.c
  ${PSI_MORE_CONTROLS}
)

if( NOT BUILD_MONOLITHIC )
set( PSI_SOURCES ${PSI_SOURCES}
  ${SOURCES_ROOT}src/psilib/fntcache.c
)
endif( NOT BUILD_MONOLITHIC )

SET_PROPERTY(SOURCE ${PSI_SOURCES}
                 APPEND
		PROPERTY COMPILE_DEFINITIONS "INTERNAL_DUMP_FONT_FILE" )
SET_SOURCE_FILES_PROPERTIES( ${PSI_SOURCES} PROPERTIES
		FOLDER "Source Files\\PSI Library" )
SET_SOURCE_FILES_PROPERTIES( ${PSI_MORE_CONTROLS} PROPERTIES
		FOLDER "Source Files\\PSI Library\\Console" )


if( WIN32 )
  SET( SYSTRAY_SOURCES  ${SOURCES_ROOT}src/systraylib/systray.c )
  SET( PSI_SOURCES ${PSI_SOURCES}  ${SYSTRAY_SOURCES} )
else( WIN32 )
  if( NOT __ANDROID__ )
  SET( SYSTRAY_SOURCES  ${SOURCES_ROOT}src/systraylib/systray_client.c )
  SET( PSI_SOURCES ${PSI_SOURCES}  ${SYSTRAY_SOURCES} )
  endif( NOT __ANDROID__ )
endif( WIN32 )

if( NOT __NO_NETWORK__ )

set( SACK_PLUSPLUS_HEADERS ${SACK_PLUSPLUS_HEADERS}
     ${SOURCES_ROOT}src/netlib/html5.websocket/client/local.h
     ${SOURCES_ROOT}src/netlib/html5.websocket/json/json.h
     ${SOURCES_ROOT}src/netlib/html5.websocket/json/jsox.h
     ${SOURCES_ROOT}src/netlib/html5.websocket/json/vesl.h
     ${SOURCES_ROOT}src/netlib/html5.websocket/html5.websocket.common.h
     ${SOURCES_ROOT}src/netlib/html5.websocket/json/unicode_non_identifiers.h
     )


endif( NOT __NO_NETWORK__ )

if( NOT __NO_NETWORK__ )
SET( JSON_SOURCES
		${SOURCES_ROOT}src/netlib/html5.websocket/json/json_emitter.c
		${SOURCES_ROOT}src/netlib/html5.websocket/json/json_parser.c
		${SOURCES_ROOT}src/netlib/html5.websocket/json/json6_parser.c
		${SOURCES_ROOT}src/netlib/html5.websocket/json/jsox_parser.c
		${SOURCES_ROOT}src/netlib/html5.websocket/json/vesl_parser.c
		${SOURCES_ROOT}src/netlib/html5.websocket/json/vesl_code_parser.c
	)

SET( HTML5_SOURCES
		${SOURCES_ROOT}src/psilib/html5.canvas/html5.canvas.c
        	${SOURCES_ROOT}src/netlib/html5.websocket/html5.websocket.common.c
        	${SOURCES_ROOT}src/netlib/html5.websocket/server/html5.websocket.c
		${SOURCES_ROOT}src/netlib/html5.websocket/client/html5.websocket.client.c
		${JSON_SOURCES}
	)
SET_SOURCE_FILES_PROPERTIES( ${HTML5_SOURCES} PROPERTIES
		FOLDER "Source Files\\HTML5 Support" )
endif( NOT __NO_NETWORK__ )



if( NOT __NO_MSGSVR__ )
set( SACK_MSG_SERVICES
#  ${SOURCES_ROOT}src/msgsvr/client/client.c
  ${SOURCES_ROOT}src/msgsvr/client/client_common.c
  ${SOURCES_ROOT}src/msgsvr/client/client_events.c
  ${SOURCES_ROOT}src/msgsvr/client/client_service.c
  ${SOURCES_ROOT}src/msgsvr/client/client_client.c
  ${SOURCES_ROOT}src/msgsvr/client/client_local.c
  ${SOURCES_ROOT}src/msgsvr/client/client_input.c
  ${SOURCES_ROOT}src/msgsvr/client/client_output.c

  ${SOURCES_ROOT}src/msgsvr/summoner/construct.c
  )
SET_SOURCE_FILES_PROPERTIES( ${SACK_MSG_SERVICES} PROPERTIES
		FOLDER "Source Files\\Message Service" )
endif( NOT __NO_MSGSVR__ )



set( FILESYSTEM_SOURCES
  ${SOURCES_ROOT}src/filesyslib/pathops.c
  ${SOURCES_ROOT}src/filesyslib/filescan.c
  ${SOURCES_ROOT}src/filesyslib/winfiles.c
)

set( FILEMONITOR_SOURCES
  ${SOURCES_ROOT}src/filesyslib/filemon/allfiles.c
)


if( __LINUX__ )
   if( __MAC__ )
      set(FILEMONITOR_SOURCES ${FILEMONITOR_SOURCES}
          ${SOURCES_ROOT}src/filesyslib/filemon/applefiles.c
      )
    else( __MAC__ )
      set(FILEMONITOR_SOURCES ${FILEMONITOR_SOURCES}
          ${SOURCES_ROOT}src/filesyslib/filemon/linuxfiles.c
      )
    endif( __MAC__ )
else( __LINUX__ )
set(FILEMONITOR_SOURCES ${FILEMONITOR_SOURCES}
  ${SOURCES_ROOT}src/filesyslib/filemon/windowsfiles.c
)
endif( __LINUX__ )

SET_SOURCE_FILES_PROPERTIES( ${FILESYSTEM_SOURCES} PROPERTIES
		FOLDER "Source Files\\File System Utils" )

SET_SOURCE_FILES_PROPERTIES( ${FILEMONITOR_SOURCES} PROPERTIES
		FOLDER "Source Files\\File System Monitor" )


set( TYPE_LIBRARY_SOURCES
  ${SOURCES_ROOT}src/typelib/binarylist.c
  ${SOURCES_ROOT}src/typelib/familytree.c
  ${SOURCES_ROOT}src/typelib/input.c
  ${SOURCES_ROOT}src/typelib/sets.c
  ${SOURCES_ROOT}src/typelib/text.c
  ${SOURCES_ROOT}src/typelib/typecode.c
  ${SOURCES_ROOT}src/typelib/spacetree.c
  ${MSG_QUEUE_SOURCES}
)

if( NOT __NO_NETWORK__ )
set( ADVANCED_TYPE_LIBRARY_SOURCES
    ${SOURCES_ROOT}src/typelib/http.c
    )
endif( NOT __NO_NETWORK__ )
set( ADVANCED_TYPE_LIBRARY_SOURCES ${ADVANCED_TYPE_LIBRARY_SOURCES}
    ${SOURCES_ROOT}src/typelib/url.c
    )

SET_SOURCE_FILES_PROPERTIES( ${TYPE_LIBRARY_SOURCES} ${ADVANCED_TYPE_LIBRARY_SOURCES} PROPERTIES
		FOLDER "Source Files\\Types" )
if( WIN32 OR __QNX__ )
set( TYPE_LIBRARY_SOURCES ${TYPE_LIBRARY_SOURCES}
  ${SOURCES_ROOT}src/typelib/msgqueue.c
)

endif( WIN32 OR __QNX__ )

if( NEED_UUID )
  if( MAKING_SACK_CORE )
    add_definitions( -D__INTERNAL_UUID__ )
  endif( MAKING_SACK_CORE )
  add_definitions( -DUUID_SOURCE )
endif( NEED_UUID )
set( UUID_SOURCES
  ${SOURCES_ROOT}src/contrib/uuid-1.6.2/uuid.c
  ${SOURCES_ROOT}src/contrib/uuid-1.6.2/uuid_md5.c
  ${SOURCES_ROOT}src/contrib/uuid-1.6.2/uuid_sha1.c
  ${SOURCES_ROOT}src/contrib/uuid-1.6.2/uuid_dce.c
  ${SOURCES_ROOT}src/contrib/uuid-1.6.2/uuid_mac.c
  ${SOURCES_ROOT}src/contrib/uuid-1.6.2/uuid_prng.c
  ${SOURCES_ROOT}src/contrib/uuid-1.6.2/uuid_str.c
  ${SOURCES_ROOT}src/contrib/uuid-1.6.2/uuid_time.c
  ${SOURCES_ROOT}src/contrib/uuid-1.6.2/uuid_ui128.c
  ${SOURCES_ROOT}src/contrib/uuid-1.6.2/uuid_ui64.c
)

SET( VECTLIB_SOURCES src/vectlib/vectlib.c
    )
SET( VECTLIB_MORE_SOURCES src/vectlib/vectlib.c
    ${CMAKE_BINARY_DIR}/src/vectlib/vectlib_double.c
     ${SOURCES_ROOT}src/vectlib/vecstruc.h

    )
SET_PROPERTY(SOURCE src/vectlib/vectlib.c
                 APPEND
		PROPERTY COMPILE_DEFINITIONS "MAKE_RCOORD_SINGLE" )


set( MD5_SOURCES
  ${SOURCES_ROOT}src/contrib/md5lib/md5c.c
  )
SET_SOURCE_FILES_PROPERTIES( ${MD5_SOURCES} PROPERTIES
				FOLDER "Source Files\\hash\\md5" )

if( NOT __NO_NETWORK__ )
set( NETWORK_HEADERS
     ${SOURCES_ROOT}src/netlib/netstruc.h
     ${SOURCES_ROOT}src/netlib/ping.h
    )
endif( NOT __NO_NETWORK__ )

if( NOT __NO_MSGSVR__ )
   set( MSGSVR_HEADERS  ${SOURCES_ROOT}src/msgsvr/client/global.h
	     ${SOURCES_ROOT}src/msgsvr/summoner/summoner.h
       )
endif( NOT __NO_MSGSVR__ )

set( SACK_PLUSPLUS_HEADERS ${SACK_PLUSPLUS_HEADERS} ${NETWORK_HEADERS} ${MSGSVR_HEADERS}
     ${SOURCES_ROOT}src/systemlib/taskinfo.h
     ${SOURCES_ROOT}src/systraylib/resource.h
     ${SOURCES_ROOT}src/systraylib/msgid.h
     ${SOURCES_ROOT}src/filesyslib/filemon/monitor.h
     ${SOURCES_ROOT}src/filesyslib/filesys_local.h
     ${SOURCES_ROOT}src/memlib/sharestruc.h
     ${SOURCES_ROOT}src/procreglib/registry.h
     ${SOURCES_ROOT}src/vectlib/vecstruc.h
     ${SOURCES_ROOT}src/SQLlib/sqlstruc.h
     ${SOURCES_ROOT}src/SQLlib/optlib/optlib.h
     ${SOURCES_ROOT}src/SQLlib/optlib/makeopts.mysql
     ${SOURCES_ROOT}src/imglib/blotproto.h
     ${SOURCES_ROOT}src/imglib/image_common.h
     ${SOURCES_ROOT}src/imglib/fntglobal.h
     ${SOURCES_ROOT}src/imglib/cache.h
    ${SOURCES_ROOT}src/imglib/gifimage.h
    ${SOURCES_ROOT}src/imglib/pngimage.h
    ${SOURCES_ROOT}src/imglib/jpgimage.h
        ${SOURCES_ROOT}src/imglib/bmpimage.h
        ${SOURCES_ROOT}src/imglib/image_common.h
        ${SOURCES_ROOT}src/imglib/sprite_local.h
        ${SOURCES_ROOT}src/vidlib/local.h
        ${SOURCES_ROOT}src/vidlib/glext.h
        ${SOURCES_ROOT}src/psilib/controlstruc.h
        ${SOURCES_ROOT}src/psilib/ctllistbox.h
        ${SOURCES_ROOT}src/psilib/global.h
        ${SOURCES_ROOT}src/psilib/calctl/local.h
        ${SOURCES_ROOT}src/psilib/mouse.h
        ${SOURCES_ROOT}src/psilib/borders.h
        ${SOURCES_ROOT}src/psilib/resource.h
        ${SOURCES_ROOT}src/psilib/CommonEdit.Frame
        ${SOURCES_ROOT}src/psilib/palette.frame
        ${SOURCES_ROOT}src/psilib/menustruc.h
        ${SOURCES_ROOT}src/psilib/console/consolestruc.h
        ${SOURCES_ROOT}src/psilib/console/history.h
        ${SOURCES_ROOT}src/psilib/console/keydefs.h
        ${SOURCES_ROOT}src/psilib/console/histstruct.h
        ${SOURCES_ROOT}src/psilib/console/regaccess.h
        ${SOURCES_ROOT}src/psilib/console/WinLogic.h
        ${SOURCES_ROOT}src/contrib/genx/genx.h
        ${SOURCES_ROOT}src/imglib/local.h
        ${SOURCES_ROOT}src/contrib/uuid-1.6.2/uuid.h
        ${SOURCES_ROOT}src/contrib/sha3lib/sha3.h
)

set(BASE_SOURCES  ${BASE_SOURCES}
  ${UNSORTED_SOURCES}
  ${MEM_ASSEMBLY_SOURCES}
  ${TYPE_LIBRARY_SOURCES}
  ${ADVANCED_TYPE_LIBRARY_SOURCES}
  ${SYSTEM_LIBRARY_SOURCES}
  ${NETWORK_SOURCES}
  ${FILESYSTEM_SOURCES}
  ${SHA1_SOURCES}
  ${SHA2_SOURCES}
  ${SHA3_SOURCES}
  ${K12_SOURCES}
  ${MD5_SOURCES}
  ${MORE_SYSTEM_SOURCES}
  ${SERVICE_STUB_SOURCES}
  ${COMM_SOURCES}
)

if( NOT __NO_OPTIONS__ )
  #message( "ADDING ODBC SOURCES TO BASE SOURCES" )
  set(BASE_SOURCES  ${BASE_SOURCES}
    ${OPTION_SOURCE}
  )
endif( NOT __NO_OPTIONS__ )


if( NOT __ARM__ )
set(BASE_SOURCES ${BASE_SOURCES} ${SACK_MSG_SERVICES} ${FILEMONITOR_SOURCES} ${HTML5_SOURCES} )
else()
set(BASE_SOURCES ${BASE_SOURCES} ${HTML5_SOURCES} )
set( ExtraDefinitions "${ExtraDefinitions};__NO_MSGSVR__" )
set( __NO_MSGSVR__ ON )
endif()


if( WIN32 )
if( NOT __NO_NETWORK__ )
LIST(APPEND BASE_SOURCES
   ${SOURCES_ROOT}src/netlib/net_winsock2.c
)
endif( NOT __NO_NETWORK__ )
if( NOT __CLR__ )
  LIST(APPEND BASE_SOURCES     ${SOURCES_ROOT}all_resources.rc )
  if( __CLR__ )
     set_source_files_properties( ${SOURCES_ROOT}all_resources.rc
  				PROPERTIES
                                COMPILE_DEFINITIONS "__CLR__"
  			)
   endif( __CLR__ )
endif( NOT __CLR__ )


endif(WIN32)

if( USE_ASSEMBLY )
  set( ExtraDefinitions ${ExtraDefinitions};HAS_ASSEMBLY )
  set( ImageExtraFlags "${ImageExtraFlags} -DHAS_ASSEMBLY" )
  set( IMAGE_ASM_SOURCES
    src/imglib/ImageFile.asm
    src/imglib/alphamac.asm
    src/imglib/blatcolor.asm
    src/imglib/blotdirasm.asm
    src/imglib/blotdirmac.asm
    src/imglib/blotdirmshadeasm.asm
    src/imglib/blotdirshadeasm.asm
    src/imglib/blotscaasm.asm
    src/imglib/blotscamac.asm
    src/imglib/blotscamshadeasm.asm
    src/imglib/blotscashadeasm.asm
    src/imglib/blotshademac.asm
    src/imglib/lineasm.asm
    src/imglib/mmx.asm
    src/imglib/plotasm.asm
  )
  set( MEM_ASSEMBLY_SOURCES src/memlib/memoryasm.asm )
endif()

if( NOT EMSCRIPTEN )
include( ${SOURCES_ROOT}src/streamlib/ffmpeg/CMakeLists.txt )
set( BASE_SOURCES ${BASE_SOURCES} ${FFMPEG_SOURCES} )
endif( NOT EMSCRIPTEN )
