macro( DEFINE_DEFAULT variable default )
	OPTION( ${variable} "${variable}" ${default} )
#if( NOT DEFINED ${variable} )
#   set( ${variable} $ENV{${variable}} )
#   if( "${${variable}}" STREQUAL "" )
#     set( ${variable} ${default} )
#   endif( "${${variable}}" STREQUAL "" )
#endif( NOT DEFINED ${variable} )
endmacro( DEFINE_DEFAULT variable )

  if( CMAKE_TOOLCHAIN_FILE )
    set( TOOLCHAIN -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} )
  endif( CMAKE_TOOLCHAIN_FILE )

macro( BuildProject PROJECT SOLUTION PROJECT_SOURCE INSTALL_RESULT )
string( TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type_lower )
string( TOLOWER "${CMAKE_BINARY_DIR}" cmake_binary_dir_lower )

  set( LAST_TARGET Build${PROJECT} )
  # this is a fake rule to support old build system at work; this should be a patch forward on proprietary
  if( cmake_binary_dir_lower MATCHES ${cmake_build_type_lower}_solution\$ )
    set( INSTALL ${CMAKE_BINARY_DIR}/../${CMAKE_BUILD_TYPE}_out/${PROJECT} )
    set( BUILD ${CMAKE_BINARY_DIR}/../${CMAKE_BUILD_TYPE}_solution/${PROJECT} ) 
  else()
    set( INSTALL ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}_out/${PROJECT} )
    set( BUILD ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}_solution/${PROJECT} ) 
  endif( cmake_binary_dir_lower MATCHES ${cmake_build_type_lower}_solution\$ )
  
  #if ( EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../android_build/${PROJECT} )
    set( ${INSTALL_RESULT} ${INSTALL} )
  #endif ( EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../android_build/${PROJECT} )

  FILE( MAKE_DIRECTORY ${BUILD} )

  if( MSVC )
    if( NOT EXISTS ${BUILD}/${SOLUTION}.sln )
      FILE( WRITE ${BUILD}/${SOLUTION}.sln )
    endif()
    if( ${CMAKE_MAKE_PROGRAM} MATCHES .*[Mm][Ss][Bb]uild.* )
	if( NOT( CMAKE_MAJOR_VERSION LESS 3 ) )
    	  build_command( BUILD_COMMAND CONFIGURATION ${CMAKE_BUILD_TYPE} TARGET INSTALL )
	else( NOT( CMAKE_MAJOR_VERSION LESS 3 ) )
    	  build_command( BUILD_COMMAND CONFIGURATION ${CMAKE_BUILD_TYPE} PROJECT_NAME ${SOLUTION} TARGET INSTALL )
	endif( NOT( CMAKE_MAJOR_VERSION LESS 3 ) )
          SET( MORE_ARGS -- /m:4 /v:m )
    else()
	if( NOT( CMAKE_MAJOR_VERSION LESS 3 ) )
  	  build_command( BUILD_COMMAND CONFIGURATION ${CMAKE_BUILD_TYPE} TARGET INSTALL )
	else( NOT( CMAKE_MAJOR_VERSION LESS 3 ) )
  	  build_command( BUILD_COMMAND CONFIGURATION ${CMAKE_BUILD_TYPE} PROJECT_NAME ${SOLUTION} TARGET INSTALL.vcxproj )
        SEPARATE_ARGUMENTS( BUILD_COMMAND WINDOWS_COMMAND ${BUILD_COMMAND} )
	endif( NOT( CMAKE_MAJOR_VERSION LESS 3 ) )
    endif()
    SET( BUILD_COMMAND ${BUILD_COMMAND} ${MORE_ARGS} )
    SET( ADD_SOURCES  SOURCES ${BUILD}/${SOLUTION}.sln )
  else( MSVC )
    if( NOT( CMAKE_MAJOR_VERSION LESS 3 ) )
       build_command( BUILD_COMMAND CONFIGURATION ${CMAKE_BUILD_TYPE} TARGET install )
    else( NOT( CMAKE_MAJOR_VERSION LESS 3 ) )
       build_command( BUILD_COMMAND CONFIGURATION ${CMAKE_BUILD_TYPE} PROJECT_NAME ${SOLUTION} TARGET install )
       SEPARATE_ARGUMENTS( BUILD_COMMAND UNIX_COMMAND ${BUILD_COMMAND} )
    endif( NOT( CMAKE_MAJOR_VERSION LESS 3 ) )
  endif( MSVC )

  set( FAKE_ARGN1 ${ARGN})
  string (REPLACE ";" " " FAKE_ARGN2 "${FAKE_ARGN1}")
  
  if( EXISTS ${PROJECT_SOURCE} )
if( UNIX OR HOST_UNIX )
   set( SCRIPTNAME makeit.sh )
else( UNIX OR HOST_UNIX )
   set( SCRIPTNAME makeit.bat )
endif( UNIX OR HOST_UNIX )


if( __ANDROID__ )  
    FILE( WRITE  ${BUILD}/${SCRIPTNAME} "\"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" -T \"${CMAKE_VS_PLATFORM_TOOLSET}\" ${TOOLCHAIN} \"${PROJECT_SOURCE}\" -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${INSTALL} ${FAKE_ARGN2} -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} -DANDROID_DIR=${ANDROID_DIR} -DANDROID_NDK_VERSION=${ANDROID_NDK_VERSION} ${DDXSDK}\n" )
else( __ANDROID__ )  
    FILE( WRITE  ${BUILD}/${SCRIPTNAME} "\"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" -T \"${CMAKE_VS_PLATFORM_TOOLSET}\" ${TOOLCHAIN} \"${PROJECT_SOURCE}\" -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${INSTALL} ${FAKE_ARGN2} ${DDXSDK}\n" )
endif( __ANDROID__ )  
    string (REPLACE ";" " " FAKE_BUILD_COMMAND "${BUILD_COMMAND}")
if( CMAKE_COMPILER_IS_GNUCC  OR WATCOM )
    string (REPLACE "-i" " " FAKE_BUILD_COMMAND "${BUILD_COMMAND}")
endif( CMAKE_COMPILER_IS_GNUCC  OR WATCOM )
    FILE( APPEND ${BUILD}/${SCRIPTNAME} ${FAKE_BUILD_COMMAND} )
  endif( EXISTS ${PROJECT_SOURCE} )
if( __ANDROID__ )
   set( package_path ${BUILD}/../../${CMAKE_BUILD_TYPE}_package/${PROJECT} )
	if ( EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../android_build/${PROJECT} )
		FILE( MAKE_DIRECTORY ${package_path} )
		FILE( WRITE ${package_path}/${SCRIPTNAME} "cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -D${INSTALL_RESULT}=${INSTALL} ${TOOLCHAIN} ${CMAKE_CURRENT_SOURCE_DIR}/../android_build/${PROJECT} ${FAKE_ARGN2}\n"  )

  if( EXISTS ${PROJECT_SOURCE} )
    add_custom_target( BuildAndroid${PROJECT} ALL
            COMMAND ${package_path}/${SCRIPTNAME}
            WORKING_DIRECTORY ${package_path}
            DEPENDS Build${PROJECT}
    ) 
  else( EXISTS ${PROJECT_SOURCE} )
    add_custom_target( BuildAndroid${PROJECT} ALL
            COMMAND ${package_path}/${SCRIPTNAME}
            WORKING_DIRECTORY ${package_path}
            DEPENDS Build${PROJECT_BASE_PROJECT}
    ) 
  endif( EXISTS ${PROJECT_SOURCE} )
	endif ( EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../android_build/${PROJECT} )


endif( __ANDROID__ )

if( EXISTS ${PROJECT_SOURCE} )

  if( UNIX OR HOST_UNIX )
  add_custom_target( Build${PROJECT} ALL
          COMMAND chmod 755 ${SCRIPTNAME}
          COMMAND ./${SCRIPTNAME}
	  WORKING_DIRECTORY ${BUILD}
          ${ADD_SOURCES}
  )
  else( UNIX OR HOST_UNIX )  
  add_custom_target( Build${PROJECT} ALL
          COMMAND ${SCRIPTNAME}
	  WORKING_DIRECTORY ${BUILD}
          ${ADD_SOURCES}
  )
  endif( UNIX OR HOST_UNIX )

endif( EXISTS ${PROJECT_SOURCE} )

if( __ANDROID__ )  
endif( __ANDROID__ )  

endmacro( BuildProject )


